PImage backGround;
PImage soil;
PImage groundHog;
PImage life;
PImage soldier;
PImage cabbage;
PImage gameOver;
PImage groundhogDown;
PImage groundhogLeft;
PImage groundhogRight;
PImage restartHovered;
PImage restartNormal;
PImage startHovered;
PImage startNormal;
PImage title;
PImage groundhogDisplay;
int soldierSpeed,soldierWalk,soldierY,cabbageX,cabbageY,lifeX=10,groundhogSpeed,groundhogDownY,groundhogDirection,groundhogTime;
final int GAME_START=0,GAME_RUN=1,GAME_LOSE=2,STAND=3,GROUNDHOGDOWN=4;
int gameState;
float groundhogY=80,groundhogX=320,playerGridX,playerGridY;
boolean leftState,rightState,downState;
void setup() {
	size(640, 480, P2D);
backGround = loadImage("img/bg.jpg");
soil = loadImage("img/soil.png");
groundHog = loadImage("img/groundhogIdle.png");
life = loadImage("img/life.png");
soldier = loadImage("img/soldier.png");
cabbage = loadImage("img/cabbage.png");
gameOver = loadImage("img/gameover.jpg");
groundhogDown = loadImage("img/groundhogDown.png");
groundhogLeft = loadImage ("img/groundhogLeft.png");
groundhogRight = loadImage("img/groundhogRight.png");
restartHovered = loadImage("img/restartHovered.png");
restartNormal = loadImage("img/restartNormal.png");
startHovered = loadImage("img/startHovered.png");
startNormal = loadImage("img/startNormal.png");
title = loadImage("img/title.jpg");
soldierY=floor(random(2,5));
cabbageX = floor(random(0,8))*80;
cabbageY = floor(random(3,6))*80;
gameState = GAME_START;
playerGridX = groundhogX/80.0;
playerGridY = groundhogY/80.0;
	// Enter Your Setup Code Here
}

void draw() {

	// Switch Game State
		// Game Start

switch(gameState){
  case GAME_START:
      image(title,0,0);
      image(startNormal,248,360);
      
      if(mouseX>248 && mouseX<392 && mouseY>360 && mouseY<420){
        image(startHovered,248,360);
      if(mousePressed){gameState = GAME_RUN;
      }
      }
      break;
      }
      
		// Game Run
switch(gameState){
  case GAME_RUN:
 image(backGround,0,0);
 image(soil,0,160);//soil
 image(cabbage,cabbageX,cabbageY);//cabbage
 noStroke();
  fill(124,204,25);
 rect(0,145,640,15);// Grass
 image(life,lifeX-70,10);//life
 image(life,lifeX,10);
 image(life,lifeX+70,10);
 fill(255,255,0);//SUN
 arc(590,50,130,130,0,360);
 fill(253,184,19);
 arc(590,50,120,120,0,360);
 if(groundhogX%80==0&&groundhogY%80==0){
 groundhogDisplay=groundHog;
 }
image(groundhogDisplay,groundhogX,groundhogY);//groundhog
soldierSpeed=2;
 soldierWalk=(soldierWalk+soldierSpeed)%(650);
 image(soldier,soldierWalk-40,soldierY*80);//SOldier
 
 
if(groundhogTime==0&&keyPressed&&key==CODED){
  switch(keyCode){

    case LEFT:
    if(leftState==true){
      groundhogDisplay=groundhogLeft;
      groundhogDirection=LEFT;
      groundhogTime=15;
      break;
    }
    case RIGHT:
   if(rightState==true){
     groundhogDisplay=groundhogRight;
     groundhogDirection=RIGHT;
     groundhogTime=15;
     break;
    }
    case DOWN:
    if(downState==true){
      groundhogDisplay=groundhogDown;
      groundhogDirection=DOWN;
      groundhogTime=15;
      break;
  }
}
}


else if(groundhogTime>0){
  groundhogTime--;
  switch(groundhogDirection){
    case LEFT:
         if(groundhogX>0){
             groundhogDisplay=groundhogLeft;
              if(groundhogTime==0){
                playerGridX--;
                groundhogX=80*playerGridX;
                  }
                 else{
                groundhogX-=((float(1)/15)*80);
                  } 
                    }      break;
    case RIGHT:
          if(groundhogX<560){
            groundhogDisplay=groundhogRight;
                if(groundhogTime==0){
                  playerGridX++;
                  groundhogX=80*playerGridX;
                }
                else{
                  groundhogX+=((float(1)/15)*80);
                }}
                break;
                
    case DOWN:
          if(groundhogY<400){
            groundhogDisplay=groundhogDown;
              if(groundhogTime==0){
                playerGridY++;
                groundhogY=80*playerGridY;
              }
              else{
                groundhogY+=((float(1)/15)*80);
              }
          }
          
              break;
  }
}

          
if(soldierWalk+40>groundhogX && soldierY*80<groundhogY+80 && soldierWalk-40<groundhogX+80 && soldierY*80+80>groundhogY){

groundhogX=320;
groundhogY=80;
groundhogTime=0;
lifeX-=70;
playerGridY=1;
playerGridX=4;    
    }
 
if(groundhogX==cabbageX && groundhogY==cabbageY){
    cabbageX=-100;
    cabbageY=-100;
    lifeX+=70;
 }
if(lifeX==-130){
   gameState=GAME_LOSE;
 }
    }
 
		// Game Lose
switch(gameState){
  case GAME_LOSE:
  image(gameOver,0,0);
  image(restartNormal,248,360);

      if(mouseX>248 && mouseX<392 && mouseY>360 && mouseY<420){
        image(restartHovered,248,360);
      if(mousePressed){
        gameState = GAME_RUN;
        lifeX+=140;
        soldierY=floor(random(2,5));
        cabbageX = floor(random(0,8))*80;
        cabbageY = floor(random(3,6))*80;
      }
      }
   break;
   
}

}

void keyPressed(){
if(key==CODED){
    switch(keyCode){
      case LEFT:
      leftState = true;
      break;
      case RIGHT:
      rightState = true;
      break;
      case DOWN:
      downState = true;
      break;
    }
  }
}



void keyReleased(){
   if(key==CODED){
    switch(keyCode){
      case LEFT:
      leftState = false;
      break;
      case RIGHT:
      rightState = false;
      break;
      case DOWN:
      downState = false;
      break;
    }
  }
}
